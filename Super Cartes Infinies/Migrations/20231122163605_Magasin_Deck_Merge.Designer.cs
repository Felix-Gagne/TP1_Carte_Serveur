// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Super_Cartes_Infinies.Data;

#nullable disable

namespace Super_Cartes_Infinies.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231122163605_Magasin_Deck_Merge")]
    partial class Magasin_Deck_Merge
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("CardPlayer", b =>
                {
                    b.Property<int>("DeckCardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeckCardId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("CardPlayer");
                });

            modelBuilder.Entity("DeckOwnedCard", b =>
                {
                    b.Property<int>("CardsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DecksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CardsId", "DecksId");

                    b.HasIndex("DecksId");

                    b.ToTable("DeckOwnedCard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cbe8af2-805e-49d9-9660-0d830295c7cc",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIgls4U5ikXauh5xBXwQdmPY+JVED7aqwkvuuXX93jguKZlTWpNNXxMeEms4kE0baA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9001a629-008e-48cf-8a7d-574558044427",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11111111-1111-1111-1111-111111111111",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defense")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ManaCost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attack = 3,
                            Defense = 3,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 2,
                            Name = "Stickly Steve"
                        },
                        new
                        {
                            Id = 2,
                            Attack = 2,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 1,
                            Name = "Sketchy Sarah"
                        },
                        new
                        {
                            Id = 3,
                            Attack = 4,
                            Defense = 2,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 2,
                            Name = "Doodle Dave"
                        },
                        new
                        {
                            Id = 4,
                            Attack = 3,
                            Defense = 5,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Pencil Pete"
                        },
                        new
                        {
                            Id = 5,
                            Attack = 4,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Marker Mike"
                        },
                        new
                        {
                            Id = 6,
                            Attack = 2,
                            Defense = 6,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 2,
                            Name = "Eraser Edith"
                        },
                        new
                        {
                            Id = 7,
                            Attack = 5,
                            Defense = 3,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Crayon Carla"
                        },
                        new
                        {
                            Id = 8,
                            Attack = 4,
                            Defense = 5,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Scribble Sam"
                        },
                        new
                        {
                            Id = 9,
                            Attack = 6,
                            Defense = 2,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 2,
                            Name = "Inkwell Ivan"
                        },
                        new
                        {
                            Id = 10,
                            Attack = 5,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Paintbrush Penny"
                        },
                        new
                        {
                            Id = 11,
                            Attack = 4,
                            Defense = 6,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Sketchpad Sally"
                        },
                        new
                        {
                            Id = 12,
                            Attack = 6,
                            Defense = 3,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Chalkboard Chuck"
                        },
                        new
                        {
                            Id = 13,
                            Attack = 5,
                            Defense = 5,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Notebook Ned"
                        },
                        new
                        {
                            Id = 14,
                            Attack = 7,
                            Defense = 2,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 2,
                            Name = "Penelope Pencil"
                        },
                        new
                        {
                            Id = 15,
                            Attack = 3,
                            Defense = 7,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Highlighter Hank"
                        },
                        new
                        {
                            Id = 16,
                            Attack = 6,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Marker Mary"
                        },
                        new
                        {
                            Id = 17,
                            Attack = 7,
                            Defense = 3,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 2,
                            Name = "Crayola Carl"
                        },
                        new
                        {
                            Id = 18,
                            Attack = 5,
                            Defense = 6,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Paperclip Paula"
                        },
                        new
                        {
                            Id = 19,
                            Attack = 8,
                            Defense = 2,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Paint Paddy"
                        },
                        new
                        {
                            Id = 20,
                            Attack = 6,
                            Defense = 5,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Pencil Shavings Pete"
                        },
                        new
                        {
                            Id = 21,
                            Attack = 7,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Sticky Stan"
                        },
                        new
                        {
                            Id = 22,
                            Attack = 5,
                            Defense = 7,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 7,
                            Name = "Charcoal Charlie"
                        },
                        new
                        {
                            Id = 23,
                            Attack = 8,
                            Defense = 3,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 2,
                            Name = "Watercolor Wendy"
                        },
                        new
                        {
                            Id = 24,
                            Attack = 6,
                            Defense = 6,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Notebook Nikki"
                        },
                        new
                        {
                            Id = 25,
                            Attack = 9,
                            Defense = 2,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Etch-a-Sketch Eddie"
                        },
                        new
                        {
                            Id = 26,
                            Attack = 4,
                            Defense = 8,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Glitter Glenda"
                        },
                        new
                        {
                            Id = 27,
                            Attack = 7,
                            Defense = 5,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Crayonbox Casey"
                        },
                        new
                        {
                            Id = 28,
                            Attack = 8,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Sketchbook Simon"
                        },
                        new
                        {
                            Id = 29,
                            Attack = 6,
                            Defense = 7,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Quill Quentin"
                        },
                        new
                        {
                            Id = 30,
                            Attack = 9,
                            Defense = 3,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Sidewalk Chalk Chloe"
                        },
                        new
                        {
                            Id = 31,
                            Attack = 7,
                            Defense = 6,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Canvas Cathy"
                        },
                        new
                        {
                            Id = 32,
                            Attack = 11,
                            Defense = 10,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 8,
                            Name = "Fountain Pen Fred"
                        },
                        new
                        {
                            Id = 33,
                            Attack = 6,
                            Defense = 8,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 6,
                            Name = "Sticky Note Steve"
                        },
                        new
                        {
                            Id = 34,
                            Attack = 9,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Doodle Pad Donna"
                        },
                        new
                        {
                            Id = 35,
                            Attack = 7,
                            Defense = 7,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 7,
                            Name = "Paint Can Patrick"
                        },
                        new
                        {
                            Id = 36,
                            Attack = 5,
                            Defense = 9,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 7,
                            Name = "Marker Maze Max"
                        },
                        new
                        {
                            Id = 37,
                            Attack = 8,
                            Defense = 6,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Etch-a-Sketch Emma"
                        },
                        new
                        {
                            Id = 38,
                            Attack = 9,
                            Defense = 5,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Charcoal Chip"
                        },
                        new
                        {
                            Id = 39,
                            Attack = 8,
                            Defense = 9,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 10,
                            Name = "Graphite Gabby"
                        },
                        new
                        {
                            Id = 40,
                            Attack = 10,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Inkwell Ike"
                        },
                        new
                        {
                            Id = 41,
                            Attack = 7,
                            Defense = 8,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Sketchbook Skyler"
                        },
                        new
                        {
                            Id = 42,
                            Attack = 10,
                            Defense = 5,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 7,
                            Name = "Chalky Charles"
                        },
                        new
                        {
                            Id = 43,
                            Attack = 8,
                            Defense = 7,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 6,
                            Name = "Color Wheel Casey"
                        },
                        new
                        {
                            Id = 44,
                            Attack = 9,
                            Defense = 6,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Canvas Cleo"
                        },
                        new
                        {
                            Id = 45,
                            Attack = 6,
                            Defense = 10,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 8,
                            Name = "Sticker Sue"
                        },
                        new
                        {
                            Id = 46,
                            Attack = 7,
                            Defense = 9,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Glue Gun Gary"
                        },
                        new
                        {
                            Id = 47,
                            Attack = 10,
                            Defense = 6,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 7,
                            Name = "Markerboard Molly"
                        },
                        new
                        {
                            Id = 48,
                            Attack = 8,
                            Defense = 8,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 7,
                            Name = "Pixel Pete"
                        },
                        new
                        {
                            Id = 49,
                            Attack = 15,
                            Defense = 15,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 20,
                            Name = "Lithography Lily"
                        },
                        new
                        {
                            Id = 50,
                            Attack = 10,
                            Defense = 7,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 8,
                            Name = "Silkscreening Simon"
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.CardPower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PowerId");

                    b.ToTable("CardPowers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            PowerId = 1,
                            value = 0
                        },
                        new
                        {
                            Id = 2,
                            CardId = 3,
                            PowerId = 2,
                            value = 0
                        },
                        new
                        {
                            Id = 3,
                            CardId = 5,
                            PowerId = 4,
                            value = 1
                        },
                        new
                        {
                            Id = 4,
                            CardId = 6,
                            PowerId = 3,
                            value = 2
                        },
                        new
                        {
                            Id = 5,
                            CardId = 7,
                            PowerId = 1,
                            value = 0
                        },
                        new
                        {
                            Id = 6,
                            CardId = 7,
                            PowerId = 6,
                            value = 0
                        },
                        new
                        {
                            Id = 7,
                            CardId = 9,
                            PowerId = 5,
                            value = 0
                        },
                        new
                        {
                            Id = 8,
                            CardId = 11,
                            PowerId = 3,
                            value = 3
                        },
                        new
                        {
                            Id = 9,
                            CardId = 12,
                            PowerId = 4,
                            value = 4
                        },
                        new
                        {
                            Id = 10,
                            CardId = 13,
                            PowerId = 2,
                            value = 0
                        },
                        new
                        {
                            Id = 11,
                            CardId = 13,
                            PowerId = 6,
                            value = 0
                        },
                        new
                        {
                            Id = 12,
                            CardId = 15,
                            PowerId = 3,
                            value = 2
                        },
                        new
                        {
                            Id = 13,
                            CardId = 15,
                            PowerId = 4,
                            value = 2
                        },
                        new
                        {
                            Id = 14,
                            CardId = 18,
                            PowerId = 3,
                            value = 3
                        },
                        new
                        {
                            Id = 15,
                            CardId = 22,
                            PowerId = 3,
                            value = 10
                        },
                        new
                        {
                            Id = 16,
                            CardId = 24,
                            PowerId = 2,
                            value = 0
                        },
                        new
                        {
                            Id = 17,
                            CardId = 32,
                            PowerId = 3,
                            value = 5
                        },
                        new
                        {
                            Id = 18,
                            CardId = 32,
                            PowerId = 2,
                            value = 0
                        },
                        new
                        {
                            Id = 19,
                            CardId = 33,
                            PowerId = 3,
                            value = 3
                        },
                        new
                        {
                            Id = 20,
                            CardId = 35,
                            PowerId = 5,
                            value = 0
                        },
                        new
                        {
                            Id = 21,
                            CardId = 35,
                            PowerId = 4,
                            value = 2
                        },
                        new
                        {
                            Id = 22,
                            CardId = 36,
                            PowerId = 6,
                            value = 0
                        },
                        new
                        {
                            Id = 23,
                            CardId = 36,
                            PowerId = 4,
                            value = 2
                        },
                        new
                        {
                            Id = 24,
                            CardId = 39,
                            PowerId = 5,
                            value = 0
                        },
                        new
                        {
                            Id = 25,
                            CardId = 39,
                            PowerId = 1,
                            value = 0
                        },
                        new
                        {
                            Id = 26,
                            CardId = 42,
                            PowerId = 6,
                            value = 0
                        },
                        new
                        {
                            Id = 27,
                            CardId = 42,
                            PowerId = 5,
                            value = 0
                        },
                        new
                        {
                            Id = 28,
                            CardId = 45,
                            PowerId = 3,
                            value = 5
                        },
                        new
                        {
                            Id = 29,
                            CardId = 45,
                            PowerId = 1,
                            value = 0
                        },
                        new
                        {
                            Id = 30,
                            CardId = 49,
                            PowerId = 2,
                            value = 0
                        },
                        new
                        {
                            Id = 31,
                            CardId = 49,
                            PowerId = 1,
                            value = 0
                        },
                        new
                        {
                            Id = 32,
                            CardId = 49,
                            PowerId = 4,
                            value = 5
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventIndex")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMatchCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPlayerATurn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerDataAId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerDataBId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserBId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WinnerUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerDataAId");

                    b.HasIndex("PlayerDataBId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayersData");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.OwnedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("OwnedCards");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId3")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("MatchPlayerDataId");

                    b.HasIndex("MatchPlayerDataId1");

                    b.HasIndex("MatchPlayerDataId2");

                    b.HasIndex("MatchPlayerDataId3");

                    b.ToTable("PlayableCard");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Money")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Power", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Powers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon = "https://static.thenounproject.com/png/1776468-200.png",
                            Name = "Charge"
                        },
                        new
                        {
                            Id = 2,
                            Icon = "https://static.thenounproject.com/png/1776468-200.png",
                            Name = "First Strike"
                        },
                        new
                        {
                            Id = 3,
                            Icon = "https://static.thenounproject.com/png/1776468-200.png",
                            Name = "Thorns"
                        },
                        new
                        {
                            Id = 4,
                            Icon = "https://static.thenounproject.com/png/1776468-200.png",
                            Name = "Heal"
                        },
                        new
                        {
                            Id = 5,
                            Icon = "https://static.thenounproject.com/png/1776468-200.png",
                            Name = "Explosion"
                        },
                        new
                        {
                            Id = 6,
                            Icon = "https://static.thenounproject.com/png/1776468-200.png",
                            Name = "Greed"
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.SerializedMatchEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerializedEvent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("SerializedMatchEvent");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.StartingCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("StartingCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2
                        },
                        new
                        {
                            Id = 3,
                            CardId = 3
                        },
                        new
                        {
                            Id = 4,
                            CardId = 4
                        },
                        new
                        {
                            Id = 5,
                            CardId = 5
                        },
                        new
                        {
                            Id = 6,
                            CardId = 6
                        },
                        new
                        {
                            Id = 7,
                            CardId = 7
                        },
                        new
                        {
                            Id = 8,
                            CardId = 8
                        },
                        new
                        {
                            Id = 9,
                            CardId = 9
                        },
                        new
                        {
                            Id = 10,
                            CardId = 10
                        },
                        new
                        {
                            Id = 11,
                            CardId = 1
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.StoreCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuyAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SellAmount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("StoreCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyAmount = 500,
                            CardId = 1,
                            SellAmount = 200
                        },
                        new
                        {
                            Id = 2,
                            BuyAmount = 500,
                            CardId = 2,
                            SellAmount = 200
                        },
                        new
                        {
                            Id = 3,
                            BuyAmount = 500,
                            CardId = 3,
                            SellAmount = 200
                        },
                        new
                        {
                            Id = 15,
                            BuyAmount = 250,
                            CardId = 15,
                            SellAmount = 100
                        });
                });

            modelBuilder.Entity("CardPlayer", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", null)
                        .WithMany()
                        .HasForeignKey("DeckCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeckOwnedCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.OwnedCard", null)
                        .WithMany()
                        .HasForeignKey("CardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Deck", null)
                        .WithMany()
                        .HasForeignKey("DecksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.CardPower", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany("cardPowers")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Power", "Power")
                        .WithMany("cardPowers")
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Power");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataA")
                        .WithMany()
                        .HasForeignKey("PlayerDataAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataB")
                        .WithMany()
                        .HasForeignKey("PlayerDataBId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlayerDataA");

                    b.Navigation("PlayerDataB");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.OwnedCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Player", null)
                        .WithMany("OwnedCard")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("BattleField")
                        .HasForeignKey("MatchPlayerDataId");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("CardsPile")
                        .HasForeignKey("MatchPlayerDataId1");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Graveyard")
                        .HasForeignKey("MatchPlayerDataId2");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Hand")
                        .HasForeignKey("MatchPlayerDataId3");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.SerializedMatchEvent", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Match", null)
                        .WithMany("SerializedEvents")
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.StartingCards", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.StoreCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Navigation("cardPowers");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.Navigation("SerializedEvents");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Navigation("BattleField");

                    b.Navigation("CardsPile");

                    b.Navigation("Graveyard");

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Navigation("OwnedCard");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Power", b =>
                {
                    b.Navigation("cardPowers");
                });
#pragma warning restore 612, 618
        }
    }
}
