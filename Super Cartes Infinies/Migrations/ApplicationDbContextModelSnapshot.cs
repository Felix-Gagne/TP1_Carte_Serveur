// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Super_Cartes_Infinies.Data;

#nullable disable

namespace Super_Cartes_Infinies.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("DeckOwnedCard", b =>
                {
                    b.Property<int>("CardsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DecksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CardsId", "DecksId");

                    b.HasIndex("DecksId");

                    b.ToTable("DeckOwnedCard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "339c374b-65e8-46c1-8252-1c9a49e7a841",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEJ0UphZKIjHSAbxmZ/44quI8IxpdzHTNFHeyUVfFvN88DnayQav1U0fvzh33Eqjgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0755c8a9-fcbc-4f9b-aec0-b54717d292ae",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11111111-1111-1111-1111-111111111111",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defense")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ManaCost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rarity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("prixVente")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attack = 3,
                            Defense = 3,
                            ImageUrl = "https://localhost:7219/images/Stickly_Steve.png",
                            ManaCost = 2,
                            Name = "Stickly Steve",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 2,
                            Attack = 2,
                            Defense = 4,
                            ImageUrl = "https://localhost:7219/images/Sketchy_Sarah.png",
                            ManaCost = 1,
                            Name = "Sketchy Sarah",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 3,
                            Attack = 4,
                            Defense = 2,
                            ImageUrl = "https://localhost:7219/images/Doodle_Dave.png",
                            ManaCost = 2,
                            Name = "Doodle Dave",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 4,
                            Attack = 3,
                            Defense = 5,
                            ImageUrl = "https://localhost:7219/images/Pencil_Pete.png",
                            ManaCost = 3,
                            Name = "Pencil Pete",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 5,
                            Attack = 4,
                            Defense = 4,
                            ImageUrl = "https://localhost:7219/images/Marker_Mike.png",
                            ManaCost = 3,
                            Name = "Marker Mike",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 6,
                            Attack = 2,
                            Defense = 6,
                            ImageUrl = "https://localhost:7219/images/Eraser_Edith.png",
                            ManaCost = 2,
                            Name = "Eraser Edith",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 7,
                            Attack = 5,
                            Defense = 3,
                            ImageUrl = "https://localhost:7219/images/Crayon_Carla.png",
                            ManaCost = 4,
                            Name = "Crayon Carla",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 8,
                            Attack = 4,
                            Defense = 5,
                            ImageUrl = "https://localhost:7219/images/Scribble_Sam.png",
                            ManaCost = 3,
                            Name = "Scribble Sam",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 9,
                            Attack = 6,
                            Defense = 2,
                            ImageUrl = "https://localhost:7219/images/Inkwell_Ivan.png",
                            ManaCost = 2,
                            Name = "Inkwell Ivan",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 10,
                            Attack = 5,
                            Defense = 4,
                            ImageUrl = "https://localhost:7219/images/Paintbrush_Penny.png",
                            ManaCost = 3,
                            Name = "Paintbrush Penny",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 11,
                            Attack = 4,
                            Defense = 6,
                            ImageUrl = "https://localhost:7219/images/Sketchpad_Sally.png",
                            ManaCost = 3,
                            Name = "Sketchpad Sally",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 12,
                            Attack = 6,
                            Defense = 3,
                            ImageUrl = "https://localhost:7219/images/Chalkboard_Chuck.png",
                            ManaCost = 3,
                            Name = "Chalkboard Chuck",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 13,
                            Attack = 5,
                            Defense = 5,
                            ImageUrl = "https://localhost:7219/images/Notebook_Ned.png",
                            ManaCost = 3,
                            Name = "Notebook Ned",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 14,
                            Attack = 7,
                            Defense = 2,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 2,
                            Name = "Penelope Pencil",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 15,
                            Attack = 3,
                            Defense = 7,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Highlighter Hank",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 16,
                            Attack = 6,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Marker Mary",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 17,
                            Attack = 7,
                            Defense = 3,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 2,
                            Name = "Crayola Carl",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 18,
                            Attack = 5,
                            Defense = 6,
                            ImageUrl = "https://localhost:7219/images/Paperclip_Paula.png",
                            ManaCost = 5,
                            Name = "Paperclip Paula",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 19,
                            Attack = 8,
                            Defense = 2,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Paint Paddy",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 20,
                            Attack = 6,
                            Defense = 5,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Pencil Shavings Pete",
                            Rarity = 0,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 21,
                            Attack = 7,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Sticky Stan",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 22,
                            Attack = 5,
                            Defense = 7,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 7,
                            Name = "Charcoal Charlie",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 23,
                            Attack = 8,
                            Defense = 3,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 2,
                            Name = "Watercolor Wendy",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 24,
                            Attack = 6,
                            Defense = 6,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Notebook Nikki",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 25,
                            Attack = 9,
                            Defense = 2,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 3,
                            Name = "Etch-a-Sketch Eddie",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 26,
                            Attack = 4,
                            Defense = 8,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Glitter Glenda",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 27,
                            Attack = 7,
                            Defense = 5,
                            ImageUrl = "https://localhost:7219/images/Crayonbox_Casey.png",
                            ManaCost = 5,
                            Name = "Crayonbox Casey",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 28,
                            Attack = 8,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Sketchbook Simon",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 29,
                            Attack = 6,
                            Defense = 7,
                            ImageUrl = "https://localhost:7219/images/Quill_Quentin.png",
                            ManaCost = 5,
                            Name = "Quill Quentin",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 30,
                            Attack = 9,
                            Defense = 3,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Sidewalk Chalk Chloe",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 31,
                            Attack = 7,
                            Defense = 6,
                            ImageUrl = "https://localhost:7219/images/Canvas_Cathy.png",
                            ManaCost = 4,
                            Name = "Canvas Cathy",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 32,
                            Attack = 11,
                            Defense = 10,
                            ImageUrl = "https://localhost:7219/images/Fountain_Pen_Fred.png",
                            ManaCost = 8,
                            Name = "Fountain Pen Fred",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 33,
                            Attack = 6,
                            Defense = 8,
                            ImageUrl = "https://localhost:7219/images/Sticky_Note_Steve.png",
                            ManaCost = 6,
                            Name = "Sticky Note Steve",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 34,
                            Attack = 9,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Doodle Pad Donna",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 35,
                            Attack = 7,
                            Defense = 7,
                            ImageUrl = "https://localhost:7219/images/Spray_Paint_Patrick.png",
                            ManaCost = 7,
                            Name = "Spray Paint Patrick",
                            Rarity = 1,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 36,
                            Attack = 5,
                            Defense = 9,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 7,
                            Name = "Marker Maze Max",
                            Rarity = 2,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 37,
                            Attack = 8,
                            Defense = 6,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 4,
                            Name = "Etch-a-Sketch Emma",
                            Rarity = 2,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 38,
                            Attack = 9,
                            Defense = 5,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Charcoal Chip",
                            Rarity = 2,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 39,
                            Attack = 8,
                            Defense = 9,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 10,
                            Name = "Graphite Gabby",
                            Rarity = 2,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 40,
                            Attack = 10,
                            Defense = 4,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Inkwell Ike",
                            Rarity = 2,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 41,
                            Attack = 7,
                            Defense = 8,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Sketchbook Skyler",
                            Rarity = 2,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 42,
                            Attack = 10,
                            Defense = 5,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 7,
                            Name = "Chalky Charles",
                            Rarity = 2,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 43,
                            Attack = 8,
                            Defense = 7,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 6,
                            Name = "Color Wheel Casey",
                            Rarity = 2,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 44,
                            Attack = 9,
                            Defense = 6,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 5,
                            Name = "Canvas Cleo",
                            Rarity = 2,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 45,
                            Attack = 6,
                            Defense = 10,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 8,
                            Name = "Sticker Sue",
                            Rarity = 2,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 46,
                            Attack = 7,
                            Defense = 9,
                            ImageUrl = "https://localhost:7219/images/Glue_Gun_Garry.png",
                            ManaCost = 5,
                            Name = "Glue Gun Gary",
                            Rarity = 3,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 47,
                            Attack = 10,
                            Defense = 6,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 7,
                            Name = "Markerboard Molly",
                            Rarity = 3,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 48,
                            Attack = 8,
                            Defense = 8,
                            ImageUrl = "https://localhost:7219/images/Pixel_Pete.png",
                            ManaCost = 7,
                            Name = "Pixel Pete",
                            Rarity = 3,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 49,
                            Attack = 15,
                            Defense = 15,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 20,
                            Name = "Lithography Lily",
                            Rarity = 3,
                            prixVente = 250
                        },
                        new
                        {
                            Id = 50,
                            Attack = 10,
                            Defense = 7,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/35/Basic_human_drawing.png",
                            ManaCost = 8,
                            Name = "Silkscreening Simon",
                            Rarity = 3,
                            prixVente = 250
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.CardPower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PowerId");

                    b.ToTable("CardPowers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            PowerId = 1,
                            value = 0
                        },
                        new
                        {
                            Id = 2,
                            CardId = 3,
                            PowerId = 2,
                            value = 0
                        },
                        new
                        {
                            Id = 3,
                            CardId = 5,
                            PowerId = 4,
                            value = 1
                        },
                        new
                        {
                            Id = 4,
                            CardId = 6,
                            PowerId = 3,
                            value = 2
                        },
                        new
                        {
                            Id = 5,
                            CardId = 7,
                            PowerId = 1,
                            value = 0
                        },
                        new
                        {
                            Id = 6,
                            CardId = 7,
                            PowerId = 6,
                            value = 0
                        },
                        new
                        {
                            Id = 7,
                            CardId = 9,
                            PowerId = 5,
                            value = 0
                        },
                        new
                        {
                            Id = 8,
                            CardId = 11,
                            PowerId = 3,
                            value = 3
                        },
                        new
                        {
                            Id = 9,
                            CardId = 12,
                            PowerId = 4,
                            value = 4
                        },
                        new
                        {
                            Id = 10,
                            CardId = 13,
                            PowerId = 2,
                            value = 0
                        },
                        new
                        {
                            Id = 11,
                            CardId = 13,
                            PowerId = 6,
                            value = 0
                        },
                        new
                        {
                            Id = 12,
                            CardId = 15,
                            PowerId = 3,
                            value = 2
                        },
                        new
                        {
                            Id = 13,
                            CardId = 15,
                            PowerId = 4,
                            value = 2
                        },
                        new
                        {
                            Id = 14,
                            CardId = 18,
                            PowerId = 3,
                            value = 3
                        },
                        new
                        {
                            Id = 15,
                            CardId = 22,
                            PowerId = 3,
                            value = 10
                        },
                        new
                        {
                            Id = 16,
                            CardId = 24,
                            PowerId = 2,
                            value = 0
                        },
                        new
                        {
                            Id = 17,
                            CardId = 32,
                            PowerId = 3,
                            value = 5
                        },
                        new
                        {
                            Id = 18,
                            CardId = 32,
                            PowerId = 2,
                            value = 0
                        },
                        new
                        {
                            Id = 19,
                            CardId = 33,
                            PowerId = 3,
                            value = 3
                        },
                        new
                        {
                            Id = 20,
                            CardId = 35,
                            PowerId = 5,
                            value = 0
                        },
                        new
                        {
                            Id = 21,
                            CardId = 35,
                            PowerId = 4,
                            value = 2
                        },
                        new
                        {
                            Id = 22,
                            CardId = 36,
                            PowerId = 6,
                            value = 0
                        },
                        new
                        {
                            Id = 23,
                            CardId = 36,
                            PowerId = 4,
                            value = 2
                        },
                        new
                        {
                            Id = 24,
                            CardId = 39,
                            PowerId = 5,
                            value = 0
                        },
                        new
                        {
                            Id = 25,
                            CardId = 39,
                            PowerId = 1,
                            value = 0
                        },
                        new
                        {
                            Id = 26,
                            CardId = 42,
                            PowerId = 6,
                            value = 0
                        },
                        new
                        {
                            Id = 27,
                            CardId = 42,
                            PowerId = 5,
                            value = 0
                        },
                        new
                        {
                            Id = 28,
                            CardId = 45,
                            PowerId = 3,
                            value = 5
                        },
                        new
                        {
                            Id = 29,
                            CardId = 45,
                            PowerId = 1,
                            value = 0
                        },
                        new
                        {
                            Id = 30,
                            CardId = 49,
                            PowerId = 2,
                            value = 0
                        },
                        new
                        {
                            Id = 31,
                            CardId = 49,
                            PowerId = 1,
                            value = 0
                        },
                        new
                        {
                            Id = 32,
                            CardId = 49,
                            PowerId = 4,
                            value = 5
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventIndex")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMatchCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPlayerATurn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerDataAId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerDataBId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserBId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WinnerUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerDataAId");

                    b.HasIndex("PlayerDataBId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayersData");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MatchTasks");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.OwnedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("OwnedCards");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Pack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseRarity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NbCards")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Packs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseRarity = 0,
                            ImageURL = "https://localhost:7219/images/BASIC_PACK.png",
                            Name = "Pack Basic",
                            NbCards = 3,
                            Price = 100
                        },
                        new
                        {
                            Id = 2,
                            BaseRarity = 0,
                            ImageURL = "https://localhost:7219/images/NORMAL_PACK.png",
                            Name = "Pack Normal",
                            NbCards = 4,
                            Price = 300
                        },
                        new
                        {
                            Id = 3,
                            BaseRarity = 1,
                            ImageURL = "https://localhost:7219/images/SUPER_PACK.png",
                            Name = "Pack Super",
                            NbCards = 5,
                            Price = 500
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId3")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SummonSickness")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("MatchPlayerDataId");

                    b.HasIndex("MatchPlayerDataId1");

                    b.HasIndex("MatchPlayerDataId2");

                    b.HasIndex("MatchPlayerDataId3");

                    b.ToTable("PlayableCard");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Loses")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Money")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SelectedDeckId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Wins")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Power", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Powers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon = "https://static.thenounproject.com/png/1776468-200.png",
                            Name = "Charge"
                        },
                        new
                        {
                            Id = 2,
                            Icon = "https://static.thenounproject.com/png/1776468-200.png",
                            Name = "First Strike"
                        },
                        new
                        {
                            Id = 3,
                            Icon = "https://static.thenounproject.com/png/1776468-200.png",
                            Name = "Thorns"
                        },
                        new
                        {
                            Id = 4,
                            Icon = "https://static.thenounproject.com/png/1776468-200.png",
                            Name = "Heal"
                        },
                        new
                        {
                            Id = 5,
                            Icon = "https://static.thenounproject.com/png/1776468-200.png",
                            Name = "Explosion"
                        },
                        new
                        {
                            Id = 6,
                            Icon = "https://static.thenounproject.com/png/1776468-200.png",
                            Name = "Greed"
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Probability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("baseQty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("rarity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PackId");

                    b.ToTable("Probability");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PackId = 1,
                            baseQty = 0,
                            rarity = 1,
                            value = 0.29999999999999999
                        },
                        new
                        {
                            Id = 2,
                            PackId = 2,
                            baseQty = 1,
                            rarity = 1,
                            value = 0.29999999999999999
                        },
                        new
                        {
                            Id = 3,
                            PackId = 2,
                            baseQty = 0,
                            rarity = 2,
                            value = 0.10000000000000001
                        },
                        new
                        {
                            Id = 4,
                            PackId = 2,
                            baseQty = 0,
                            rarity = 3,
                            value = 0.02
                        },
                        new
                        {
                            Id = 5,
                            PackId = 3,
                            baseQty = 1,
                            rarity = 2,
                            value = 0.25
                        },
                        new
                        {
                            Id = 6,
                            PackId = 3,
                            baseQty = 0,
                            rarity = 3,
                            value = 0.02
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.SerializedMatchEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerializedEvent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("SerializedMatchEvent");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.StartingCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("StartingCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2
                        },
                        new
                        {
                            Id = 3,
                            CardId = 3
                        },
                        new
                        {
                            Id = 4,
                            CardId = 4
                        },
                        new
                        {
                            Id = 5,
                            CardId = 5
                        },
                        new
                        {
                            Id = 6,
                            CardId = 6
                        },
                        new
                        {
                            Id = 7,
                            CardId = 7
                        },
                        new
                        {
                            Id = 8,
                            CardId = 8
                        },
                        new
                        {
                            Id = 9,
                            CardId = 9
                        },
                        new
                        {
                            Id = 10,
                            CardId = 10
                        },
                        new
                        {
                            Id = 11,
                            CardId = 1
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.StoreCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuyAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SellAmount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("StoreCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyAmount = 500,
                            CardId = 1,
                            SellAmount = 200
                        },
                        new
                        {
                            Id = 2,
                            BuyAmount = 500,
                            CardId = 2,
                            SellAmount = 200
                        },
                        new
                        {
                            Id = 3,
                            BuyAmount = 500,
                            CardId = 3,
                            SellAmount = 200
                        },
                        new
                        {
                            Id = 15,
                            BuyAmount = 250,
                            CardId = 15,
                            SellAmount = 100
                        });
                });

            modelBuilder.Entity("DeckOwnedCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.OwnedCard", null)
                        .WithMany()
                        .HasForeignKey("CardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Deck", null)
                        .WithMany()
                        .HasForeignKey("DecksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.CardPower", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany("cardPowers")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Power", "Power")
                        .WithMany("cardPowers")
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Power");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Deck", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", null)
                        .WithMany("DeckCard")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataA")
                        .WithMany()
                        .HasForeignKey("PlayerDataAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataB")
                        .WithMany()
                        .HasForeignKey("PlayerDataBId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlayerDataA");

                    b.Navigation("PlayerDataB");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.OwnedCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Player", null)
                        .WithMany("OwnedCard")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("BattleField")
                        .HasForeignKey("MatchPlayerDataId");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("CardsPile")
                        .HasForeignKey("MatchPlayerDataId1");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Graveyard")
                        .HasForeignKey("MatchPlayerDataId2");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Hand")
                        .HasForeignKey("MatchPlayerDataId3");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", null)
                        .WithMany("Players")
                        .HasForeignKey("CardId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Probability", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Pack", "Pack")
                        .WithMany("Probabilities")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.SerializedMatchEvent", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Match", null)
                        .WithMany("SerializedEvents")
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.StartingCards", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.StoreCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("cardPowers");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.Navigation("SerializedEvents");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Navigation("BattleField");

                    b.Navigation("CardsPile");

                    b.Navigation("Graveyard");

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Pack", b =>
                {
                    b.Navigation("Probabilities");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Navigation("DeckCard");

                    b.Navigation("OwnedCard");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Power", b =>
                {
                    b.Navigation("cardPowers");
                });
#pragma warning restore 612, 618
        }
    }
}
